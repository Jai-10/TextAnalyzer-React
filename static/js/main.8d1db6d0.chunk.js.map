{"version":3,"sources":["Components/Navbar/Navbar.js","Components/Textform/Textform.js","Components/Alert/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","style","borderBottom","href","title","type","id","onClick","toggleMode","htmlFor","Textform","useState","text","setText","heading","rows","value","onChange","event","target","placeholder","backgroundColor","toUpperCase","showAlert","toLowerCase","newText","split","join","document","getElementById","select","navigator","clipboard","writeText","filter","element","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8d1db6d0.chunk.js","sourcesContent":["import React from 'react'\r\n// import PropTypes from 'prop-types'\r\n\r\nfunction Navbar(props) {\r\n     return (\r\n     <div className='app__navbar'>\r\n          \r\n          {/* className is enclosed in `` so that we can use \"template literal\" */}\r\n          <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`} style={{borderBottom: \"1px solid #ccccff\"}}>\r\n                                                       {/* now we can use a variable here, as this is JS now */}\r\n               <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                         <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                         <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                              <li className=\"nav-item\">\r\n                                   <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                              </li>\r\n                         </ul>\r\n\r\n                         {/* dark theme */}\r\n                         <div className={`form-check form-switch float-end text-${props.mode=='dark'?'light': 'dark'}`}>\r\n                              <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefaultDark\" onClick={props.toggleMode}/>\r\n                              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefaultDark\">Toggle theme</label>\r\n                         </div>\r\n                    </div>\r\n               </div>\r\n          </nav>\r\n\r\n     </div>\r\n     );\r\n}\r\n\r\nexport default Navbar\r\n\r\n\r\n// set the data types of props.\r\n// Navbar.propTypes = {\r\n//      title: PropTypes.string.isRequired,\r\n//      about: PropTypes.string\r\n// }\r\n\r\n// default props\r\n// Navbar.defaultProps = {\r\n//      title: \"--\",\r\n//      about: \"--\"\r\n// }","import './Textform.css';\r\nimport React, {useState} from 'react'\r\n\r\nfunction Textform(props) {\r\n\r\n     const [text, setText] = useState('');\r\n     // text = \"new text\";     // incorrect way to change the text.\r\n     // setText(\"new text\");     // correct way to change the text.\r\n\r\n\r\n     // when listening to an event, we get an 'event' target tag with it.\r\n     const handleOnChange = (event) => {\r\n          // console.log('change occurred');\r\n          setText(event.target.value);\r\n     };\r\n\r\n\r\n     const upperClick = (event) => {\r\n          // console.log('clicked uppecase btn');\r\n          setText(text.toUpperCase());        // its state changes, so it is re-rendered\r\n          props.showAlert(\"Converted to upper case\", \"success\");\r\n     };\r\n\r\n     const lowerClick = (event) => {\r\n          // console.log('clicked lowercase btn');\r\n          setText(text.toLowerCase());        // its state changes, so it is re-rendered\r\n          props.showAlert(\"Converted to lower case\", \"success\");\r\n     };\r\n     \r\n     const clearClick = () => {\r\n          setText('');\r\n          props.showAlert(\"Cleared the text\", \"success\");\r\n     };\r\n     \r\n     // from solutions\r\n     const copyText = () => {\r\n          var text = document.getElementById('myBox');\r\n          text.select();\r\n          navigator.clipboard.writeText(text.value);\r\n          props.showAlert(\"Text copied to clipboard\", \"success\");\r\n     };\r\n     const removeExtraSpaces = () => {\r\n          let newText = text.split(/[ ]+/);\r\n          setText(newText.join(\" \"));\r\n          props.showAlert(\"Extra spaces removed\", \"success\");\r\n     };\r\n\r\n\r\n\r\n     return (\r\n     <>\r\n     <div className='container'>\r\n          <h4>{props.heading}</h4>\r\n          <div className=\"mb-3\">\r\n               <textarea className=\"form-control\" id=\"myBox\" rows=\"10\"\r\n                    value={text} onChange={handleOnChange} placeholder=\"Enter text here..\"\r\n                    style={{\r\n                         backgroundColor: \"#f2f2f2\"\r\n                    }}\r\n               >\r\n               </textarea>\r\n          </div>\r\n\r\n          <button type=\"button\" className=\"btn btn-primary mx-2\" onClick={upperClick}>Convert to UPPERCASE</button>\r\n          <button type=\"button\" className=\"btn btn-primary mx-2\" onClick={lowerClick}>Convert to lowercase</button>\r\n          {/* <button type=\"button\" className=\"btn btn-success\" onClick={invertClick}>InVeRt Case</button> */}\r\n          {/* <button type=\"button\" className=\"btn btn-danger\" onClick={capitaliseClick}>Capitalise Text</button> */}\r\n          \r\n          {/* from solutions */}\r\n          <button type=\"button\" className=\"btn btn-primary\" onClick={removeExtraSpaces}>Remove Extra Spaces</button>\r\n          <button type=\"button\" className=\"btn btn-secondary float-end\" onClick={copyText}>Copy Text</button>\r\n\r\n          <button type=\"button\" className=\"btn btn-dark float-end mx-3\" onClick={clearClick}>Clear text</button>\r\n     </div>\r\n\r\n     <br /> <hr />\r\n\r\n     <div className=\"container my-4\">\r\n          <h4>Your text summary</h4>\r\n          <p>{text.split(\" \").filter((element) => {           // .filter() takes a func as an arg; and removes the elements that return false\r\n               return element.length!=0;\r\n          }).length} words, {text.length} characters</p>\r\n\r\n          {/* info based on google */}\r\n          <p>An average reader will take about {0.008 * text.length} minutes to read this piece of text.</p>\r\n\r\n          <br />\r\n\r\n          <div className=\"preview\">\r\n               <h4>Preview</h4>\r\n               <p>{text.length>0? text: \"Enter something in the textbox above to preview it.\"}</p>\r\n          </div>\r\n     </div>\r\n     </>\r\n     )\r\n}\r\n\r\nexport default Textform\r\n","import React from 'react'\r\nimport './Alert.css';\r\n\r\nfunction Alert(props) {\r\n\r\n     const capitalize = (word) => {\r\n          const lower = word.toLowerCase();\r\n          return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n     };\r\n\r\n\r\n     return (\r\n     // returns iff props.alert is true\r\n     props.alert && <div className={`container alert alert-${props.alert.type} alert-dismissible fade show my-4`} role=\"alert\">\r\n          <strong>{capitalize(props.alert.type)}!</strong> &nbsp; {props.alert.msg}\r\n     </div>\r\n     )\r\n}\r\n\r\nexport default Alert\r\n","import React, { useState } from 'react'\n\nimport Navbar from \"./Components/Navbar/Navbar\";\nimport Textform from './Components/Textform/Textform';\nimport Alert from './Components/Alert/Alert';\n\n\nfunction App() {\n\n  // for themes\n  const [mode, setMode] = useState('light');    // whether dark mode is enabled or not.\n\n  // runs when toggle switch is clicked\n  const toggleMode = () => {\n    if (mode == 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#2d3339';\n      document.body.style.color = 'white';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = '#2d3339';\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  };\n\n\n\n\n  // for alert box\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    });\n\n    // dismiss the alert box after 2s\n    setTimeout(function() {\n      setAlert(null);\n    }, 2100);\n  };\n\n\n\n\n\n  return (\n    <div className=\"App\">\n    \n      {/* <Navbar title=\"First Navbar\" about=\"About us/me\"/> */}\n      <Navbar title=\"TextAnalyzer\" mode={mode} toggleMode={toggleMode}/>\n\n\n      {/* 'alert' is the value(msg, type) of alert from the useState hook */}\n      <Alert alert={alert}/>\n\n\n\n      {/* bootstrap class */}\n      <div className=\"container my-5\">\n        <Textform heading='Enter the text to be analysed' showAlert={showAlert}/>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}